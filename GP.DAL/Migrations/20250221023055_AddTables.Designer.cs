// <auto-generated />
using System;
using GP.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GP.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250221023055_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GP.DAL.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentAffairsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentAffairsId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("GP.DAL.Models.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DeanId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeanId")
                        .IsUnique();

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("GP.DAL.Models.Course", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditHour")
                        .HasColumnType("int");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfLec")
                        .HasColumnType("int");

                    b.Property<int>("NoOfSec")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("DeptId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GP.DAL.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("HeadId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("GP.DAL.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SSN")
                        .HasMaxLength(16)
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GP.DAL.Models.Enrollment", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "CourseCode");

                    b.HasIndex("CourseCode");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("GP.DAL.Models.FacultyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.ToTable("FacultyMembers");
                });

            modelBuilder.Entity("GP.DAL.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("GP.DAL.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<double>("AmountDue")
                        .HasColumnType("float");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialAffairsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentAffairsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("FinancialAffairsId");

                    b.HasIndex("StudentAffairsId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("GP.DAL.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("AssistantId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Student", b =>
                {
                    b.Property<int>("SSN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SSN"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("HighSchoolGrade")
                        .HasColumnType("float");

                    b.Property<string>("HomePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterYear")
                        .HasColumnType("int");

                    b.HasKey("SSN");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("DeptId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.Advisor", b =>
                {
                    b.HasBaseType("GP.DAL.Models.Employee");

                    b.ToTable("Advisors", (string)null);
                });

            modelBuilder.Entity("GP.DAL.Models.FinancialAffairs", b =>
                {
                    b.HasBaseType("GP.DAL.Models.Employee");

                    b.Property<int?>("ManagerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasIndex("ManagerId");

                    b.ToTable("FinancialAffairs", (string)null);
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUp", b =>
                {
                    b.HasBaseType("GP.DAL.Models.Employee");

                    b.ToTable("FollowUps", (string)null);
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUpSchedule", b =>
                {
                    b.HasBaseType("GP.DAL.Models.Schedule");

                    b.Property<int>("FollowUpId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAttendant")
                        .HasColumnType("bit");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasIndex("FollowUpId");

                    b.ToTable("FollowUpSchedules", (string)null);
                });

            modelBuilder.Entity("GP.DAL.Models.StudentAffairs", b =>
                {
                    b.HasBaseType("GP.DAL.Models.Employee");

                    b.Property<int?>("ManagerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasIndex("ManagerId");

                    b.ToTable("StudentAffairs", (string)null);
                });

            modelBuilder.Entity("GP.DAL.Models.StudentSchedule", b =>
                {
                    b.HasBaseType("GP.DAL.Models.Schedule");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasIndex("DeptId");

                    b.ToTable("StudentSchedule", (string)null);
                });

            modelBuilder.Entity("GP.DAL.Models.Application", b =>
                {
                    b.HasOne("GP.DAL.Models.StudentAffairs", "StudentAffairs")
                        .WithMany("Applications")
                        .HasForeignKey("StudentAffairsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentAffairs");
                });

            modelBuilder.Entity("GP.DAL.Models.College", b =>
                {
                    b.HasOne("GP.DAL.Models.FacultyMember", "Dean")
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.College", "DeanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dean");
                });

            modelBuilder.Entity("GP.DAL.Models.Course", b =>
                {
                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GP.DAL.Models.Department", b =>
                {
                    b.HasOne("GP.DAL.Models.College", "College")
                        .WithMany("Departments")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Head")
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.Department", "HeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("GP.DAL.Models.Enrollment", b =>
                {
                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GP.DAL.Models.FacultyMember", b =>
                {
                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("FacultyMembers")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GP.DAL.Models.Receipt", b =>
                {
                    b.HasOne("GP.DAL.Models.College", "College")
                        .WithMany("Receipts")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FinancialAffairs", "FinancialAffairs")
                        .WithMany("Receipts")
                        .HasForeignKey("FinancialAffairsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.StudentAffairs", "StudentAffairs")
                        .WithMany("Receipts")
                        .HasForeignKey("StudentAffairsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("FinancialAffairs");

                    b.Navigation("StudentAffairs");
                });

            modelBuilder.Entity("GP.DAL.Models.Schedule", b =>
                {
                    b.HasOne("GP.DAL.Models.Advisor", "Advisor")
                        .WithMany("Schedules")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Assistant")
                        .WithMany("AssistantSchedules")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Instructor")
                        .WithMany("InstructorSchedules")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Place", "Place")
                        .WithMany("Schedules")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Assistant");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("GP.DAL.Models.Student", b =>
                {
                    b.HasOne("GP.DAL.Models.Advisor", "Advisor")
                        .WithMany("Students")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GP.DAL.Models.Advisor", b =>
                {
                    b.HasOne("GP.DAL.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.Advisor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.DAL.Models.FinancialAffairs", b =>
                {
                    b.HasOne("GP.DAL.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.FinancialAffairs", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FinancialAffairs", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUp", b =>
                {
                    b.HasOne("GP.DAL.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.FollowUp", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUpSchedule", b =>
                {
                    b.HasOne("GP.DAL.Models.FollowUp", "FollowUp")
                        .WithMany("FollowUpSchedules")
                        .HasForeignKey("FollowUpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Schedule", null)
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.FollowUpSchedule", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FollowUp");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentAffairs", b =>
                {
                    b.HasOne("GP.DAL.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.StudentAffairs", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.StudentAffairs", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentSchedule", b =>
                {
                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Schedule", null)
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.StudentSchedule", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GP.DAL.Models.College", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("GP.DAL.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("FacultyMembers");

                    b.Navigation("StudentSchedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.FacultyMember", b =>
                {
                    b.Navigation("AssistantSchedules");

                    b.Navigation("InstructorSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Place", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("GP.DAL.Models.Advisor", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.FinancialAffairs", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUp", b =>
                {
                    b.Navigation("FollowUpSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentAffairs", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Receipts");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
