// <auto-generated />
using System;
using GP.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GP.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250305042909_ModifyReceipt2")]
    partial class ModifyReceipt2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GP.DAL.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("GP.DAL.Models.Advisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("GP.DAL.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentAffairsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentAffairsId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("GP.DAL.Models.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DeanId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeanId")
                        .IsUnique()
                        .HasFilter("[DeanId] IS NOT NULL");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("GP.DAL.Models.Course", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditHour")
                        .HasColumnType("int");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfLec")
                        .HasColumnType("int");

                    b.Property<int>("NoOfSec")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("DeptId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GP.DAL.Models.CoursePrerequisite", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrerequisiteCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseCode", "PrerequisiteCode");

                    b.HasIndex("PrerequisiteCode");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("GP.DAL.Models.CoursesTerm", b =>
                {
                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("TermId", "CourseCode");

                    b.HasIndex("CourseCode");

                    b.ToTable("CoursesTerms");
                });

            modelBuilder.Entity("GP.DAL.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("GP.DAL.Models.Enrollment", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseCode");

                    b.HasIndex("CourseCode");

                    b.HasIndex("TermId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("GP.DAL.Models.FacultyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FacultyMembers");
                });

            modelBuilder.Entity("GP.DAL.Models.FinancialAffairs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FinancialAffairs");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUpSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int?>("AssistantId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FollowUpId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAttendant")
                        .HasColumnType("bit");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeBegin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("FollowUpId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("FollowUpSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.GPUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GP.DAL.Models.InstructorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int?>("AssistantId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeBegin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("InstructorSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("GP.DAL.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<double>("AmountDue")
                        .HasColumnType("float");

                    b.Property<string>("AmountFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinancialAffairsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("StudentAffairsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("FinancialAffairsId");

                    b.HasIndex("StudentAffairsId");

                    b.HasIndex("StudentId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("GP.DAL.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CollegeId")
                        .HasColumnType("int");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("Group")
                        .HasColumnType("int");

                    b.Property<double>("HighSchoolGrade")
                        .HasColumnType("float");

                    b.Property<string>("HomePhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int?>("RegisterYear")
                        .HasColumnType("int");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("DeptId");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentAffairs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SSN")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StudentAffairs");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int?>("AssistantId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeBegin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("DeptId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("List")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("GP.DAL.Models.Admin", b =>
                {
                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithOne("Admin")
                        .HasForeignKey("GP.DAL.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.Advisor", b =>
                {
                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithOne("Advisor")
                        .HasForeignKey("GP.DAL.Models.Advisor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.Application", b =>
                {
                    b.HasOne("GP.DAL.Models.StudentAffairs", "StudentAffairs")
                        .WithMany("Applications")
                        .HasForeignKey("StudentAffairsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.Student", "Student")
                        .WithOne("Application")
                        .HasForeignKey("GP.DAL.Models.Application", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentAffairs");
                });

            modelBuilder.Entity("GP.DAL.Models.College", b =>
                {
                    b.HasOne("GP.DAL.Models.FacultyMember", "Dean")
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.College", "DeanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Dean");
                });

            modelBuilder.Entity("GP.DAL.Models.Course", b =>
                {
                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("GP.DAL.Models.CoursePrerequisite", b =>
                {
                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Course", "Prerequisite")
                        .WithMany("RequiredFor")
                        .HasForeignKey("PrerequisiteCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("GP.DAL.Models.CoursesTerm", b =>
                {
                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("CoursesTerms")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Term", "Term")
                        .WithMany("CoursesTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("GP.DAL.Models.Department", b =>
                {
                    b.HasOne("GP.DAL.Models.College", "College")
                        .WithMany("Departments")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Head")
                        .WithOne()
                        .HasForeignKey("GP.DAL.Models.Department", "HeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("College");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("GP.DAL.Models.Enrollment", b =>
                {
                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Term", "Term")
                        .WithMany("Enrollments")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("GP.DAL.Models.FacultyMember", b =>
                {
                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("FacultyMembers")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithOne("FacultyMember")
                        .HasForeignKey("GP.DAL.Models.FacultyMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.FinancialAffairs", b =>
                {
                    b.HasOne("GP.DAL.Models.FinancialAffairs", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithOne("FinancialAffairs")
                        .HasForeignKey("GP.DAL.Models.FinancialAffairs", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUp", b =>
                {
                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUpSchedule", b =>
                {
                    b.HasOne("GP.DAL.Models.FacultyMember", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");

                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("FollowUpSchedules")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FollowUp", "FollowUp")
                        .WithMany("FollowUpSchedules")
                        .HasForeignKey("FollowUpId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("GP.DAL.Models.Place", "Place")
                        .WithMany("FollowUpSchedules")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Course");

                    b.Navigation("FollowUp");

                    b.Navigation("Instructor");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("GP.DAL.Models.InstructorSchedule", b =>
                {
                    b.HasOne("GP.DAL.Models.Advisor", "Advisor")
                        .WithMany("InstructorSchedules")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Assistant")
                        .WithMany("AssistantSchedules")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("InstructorSchedules")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Instructor")
                        .WithMany("InstructorSchedules")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.Place", "Place")
                        .WithMany("InstructorSchedules")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Assistant");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("GP.DAL.Models.Receipt", b =>
                {
                    b.HasOne("GP.DAL.Models.College", "College")
                        .WithMany("Receipts")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FinancialAffairs", "FinancialAffairs")
                        .WithMany("Receipts")
                        .HasForeignKey("FinancialAffairsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.StudentAffairs", "StudentAffairs")
                        .WithMany("Receipts")
                        .HasForeignKey("StudentAffairsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.Student", "Student")
                        .WithMany("Receipts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("College");

                    b.Navigation("FinancialAffairs");

                    b.Navigation("Student");

                    b.Navigation("StudentAffairs");
                });

            modelBuilder.Entity("GP.DAL.Models.Student", b =>
                {
                    b.HasOne("GP.DAL.Models.Advisor", "Advisor")
                        .WithMany("Students")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.College", "College")
                        .WithMany("Students")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithOne("Student")
                        .HasForeignKey("GP.DAL.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advisor");

                    b.Navigation("College");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentAffairs", b =>
                {
                    b.HasOne("GP.DAL.Models.StudentAffairs", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GP.DAL.Models.GPUser", "User")
                        .WithOne("StudentAffairs")
                        .HasForeignKey("GP.DAL.Models.StudentAffairs", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentSchedule", b =>
                {
                    b.HasOne("GP.DAL.Models.Advisor", "Advisor")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Assistant")
                        .WithMany()
                        .HasForeignKey("AssistantId");

                    b.HasOne("GP.DAL.Models.Course", "Course")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Department", "Department")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.FacultyMember", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("GP.DAL.Models.Place", "Place")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GP.DAL.Models.Student", null)
                        .WithMany("StudentSchedules")
                        .HasForeignKey("StudentId");

                    b.Navigation("Advisor");

                    b.Navigation("Assistant");

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Instructor");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("GP.DAL.Models.GPUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GP.DAL.Models.Advisor", b =>
                {
                    b.Navigation("InstructorSchedules");

                    b.Navigation("StudentSchedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.College", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Receipts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.Course", b =>
                {
                    b.Navigation("CoursesTerms");

                    b.Navigation("Enrollments");

                    b.Navigation("FollowUpSchedules");

                    b.Navigation("InstructorSchedules");

                    b.Navigation("Prerequisites");

                    b.Navigation("RequiredFor");

                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("FacultyMembers");

                    b.Navigation("StudentSchedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GP.DAL.Models.FacultyMember", b =>
                {
                    b.Navigation("AssistantSchedules");

                    b.Navigation("InstructorSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.FinancialAffairs", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("GP.DAL.Models.FollowUp", b =>
                {
                    b.Navigation("FollowUpSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.GPUser", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Advisor")
                        .IsRequired();

                    b.Navigation("FacultyMember")
                        .IsRequired();

                    b.Navigation("FinancialAffairs")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("StudentAffairs")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GP.DAL.Models.Place", b =>
                {
                    b.Navigation("FollowUpSchedules");

                    b.Navigation("InstructorSchedules");

                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.Student", b =>
                {
                    b.Navigation("Application");

                    b.Navigation("Enrollments");

                    b.Navigation("Receipts");

                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("GP.DAL.Models.StudentAffairs", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Receipts");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("GP.DAL.Models.Term", b =>
                {
                    b.Navigation("CoursesTerms");

                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
