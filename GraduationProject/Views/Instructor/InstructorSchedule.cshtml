@{
    ViewData["Title"] = "Instructor Schedule";
    var schedule = ViewData["Schedule"] as IEnumerable<InstructorSchedule>;
    var dayOrder = new Dictionary<string, int>
    {
        { "Saturday", 1 },
        { "Sunday", 2 },
        { "Monday", 3 },
        { "Tuesday", 4 },
        { "Wednesday", 5 },
        { "Thursday", 6 }
    };
}
<div class="container mt-4 doctor-schedule schedule-s" id="searchResults">
    <div id="report">
    <div class="table-container" >  
          <div class="header-section">  
              <div>  
                  <h5>Ministry of Higher Education</h5>  
                  <h6>Modern University for Technology and Information</h6>  
                  <h6>Faculty of Computers and Artificial Intelligence</h6>
                <p class="p-0 fs-5 fw-bold semester">Semester : @schedule?.FirstOrDefault().Semester 
                    @schedule?.FirstOrDefault().AcademicYear</p>
            </div>  
              <div>  
                  <img src="~/images/Mti(Gray).png" alt="MTI Logo" width="150">  
              </div>  
          </div>  
          <h5 class="text-center">Instructor Timetable</h5>
        <p><strong>Instructor:</strong> @schedule?.FirstOrDefault().FacultyMember.FirstName 
            @schedule?.FirstOrDefault().FacultyMember.MiddleName @schedule?.FirstOrDefault().FacultyMember.LastName
        </p>
        <table class="table table-bordered">  
              <thead class="table-dark">  
                  <tr>  
                     <th>Day</th>
                     <th>Course Code</th>
                     <th>Course Name</th>
                     <th>Place</th>
                     <th>Type</th>
  					 <th>Time</th> 
                  </tr>  
              </thead>  
              <tbody>
                    @foreach (var dayGroup in schedule
                    .OrderBy(s => dayOrder.ContainsKey(s.Day) ? dayOrder[s.Day] : 999) // fallback if missing
                    .GroupBy(s => s.Day)
                    .OrderBy(g => dayOrder.ContainsKey(g.Key) ? dayOrder[g.Key] : 999))
                    {
                        bool firstRow = true;
                        @foreach (var row in dayGroup.OrderBy(r => r.TimeBegin))
                        {
                            <tr>
                                @if (firstRow)
                                {
                                    <td class="align-content-center" rowspan="@dayGroup.Count()">@row.Day</td>
                                    firstRow = false;
                                }
                                <td class="align-content-center">@row.CourseCode</td>
                                <td class="align-content-center">@row.Course?.CourseName</td>
                                <td class="align-content-center">@row.Place?.Type</td>
                                <td class="align-content-center">@row.Place?.PlaceName</td>
                                <td class="align-content-center">@row.TimeBegin.ToString(@"hh\:mm") - @row.TimeEnd.ToString(@"hh\:mm")</td>
                                
                            </tr>
                        }
                    }
                </tbody>  
          </table>  
      </div>
    <div class="m-auto my-4 text-center ">
        <button class="btn btn-large btn-primary" onclick="printContainer()">Print</button>
    </div>
    </div>
  </div>  
@section Scripts {
    <script src="~/js/print.js"></script>
}

